// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Route > build 1`] = `
"
		let result = undefined;
		let floor = this.makeFloor();

		try {
			Execution: {
				
/* beforeHookBeforeRouteExecution */
/* end_block */


				result = await this.hooks.beforeRouteExecution(request)
				
				
/* beforeTreatResultHookBeforeRouteExecution */
/* end_block */


				if(result instanceof this.Response){

break Execution;
}

				
/* afterHookBeforeRouteExecution */
/* end_block */


				
/* beforePreflightSteps */
/* end_block */


				
/* beforePreflightStep(index: 0) */
/* end_block */


				result = this.preflightSteps[0].processFunction(
					request,
					this.preflightSteps[0].params.options,
					this.preflightSteps[0].params.input(floor.pickup)
				);

				
/* beforeTreatResultPreflightStep(index: 0) */
/* end_block */


				if(result instanceof this.Response){

break Execution;
}

				
/* beforeIndexingResultPreflightStep(index: 0) */
/* end_block */


				floor.drop("flute", result["flute"]);
				

/* afterPreflightStep(index: 0) */
/* end_block */


				
/* afterPreflightSteps */
/* end_block */


				
			if(request.body === undefined){
				
/* beforeHookParsingBody */
/* end_block */


				result = await this.hooks.parsingBody(request);

				
/* beforeTreatResultHookParsingBody */
/* end_block */


				if(result instanceof this.Response){

break Execution;
}

				
/* afterHookParsingBody */
/* end_block */

			}
			

				
/* beforeSteps */
/* end_block */


				
/* beforeExtractStep(index: 0) */
/* end_block */


			{
				
/* beforeLevelTwoExtractStep(index: 0, one: params, two: userId) */
/* end_block */


				let temp = this.steps[0]
					.extractObject["params"]["userId"]
					.safeParse(request["params"]?.["userId"])

				
/* beforeTreatResultLevelTwoExtractStep(index: 0, one: params, two: userId) */
/* end_block */

		
				if(!temp.success){
					result = this.steps[0].catchError(
						"params",
						"userId",
						temp.error,
					);
					break Execution;
				}

				
/* beforeIndexingResultLevelTwoExtractStep(index: 0, one: params, two: userId) */
/* end_block */

		
				floor.drop(
					"userId",
					temp.data,
				);

				
/* afterLevelTowExtractStep(index: 0, one: params, two: userId) */
/* end_block */

			}
			

			{
				
/* beforeLevelOneExtractStep(index: 0, one: body) */
/* end_block */


				let temp = this.steps[0]
					.extractObject["body"]
					.safeParse(request["body"])

				
/* beforeTreatResultLevelOneExtractStep(index: 0, one: body) */
/* end_block */

		
				if(!temp.success){
					result = this.steps[0].catchError(
						"body",
						undefined,
						temp.error,
					);
					break Execution;
				}

				
/* beforeIndexingResultLevelOneExtractStep(index: 0, one: body) */
/* end_block */

		
				floor.drop(
					"body",
					temp.data,
				);

				
/* afterLevelOneExtractStep(index: 0, one: body) */
/* end_block */

			}
			

/* afterExtractStep(index: 0) */
/* end_block */


		
/* beforeCutStep(index: 1) */
/* end_block */


		result = this.steps[1].cutFunction(floor, request);

		
/* beforeTreatResultCutStep(index: 1) */
/* end_block */


		if(result instanceof this.Response){

				let temp = this.steps[1].responseZodSchema.safeParse(result);

				if(!temp.success){
					throw new this.ContractResponseError(temp.error, result);
				}
			
break Execution;
}

		
/* beforeIndexingResultCutStep(index: 1) */
/* end_block */


		floor.drop("toto", result["toto"]);

		
/* afterCutStep(index: 1) */
/* end_block */

		

		
/* beforeHandlerStep(index: 2) */
/* end_block */


		result = this.steps[2].handlerFunction(floor.pickup, request);

		
/* beforeTreatResultHandlerStep(index: 2) */
/* end_block */


		if(result instanceof this.Response){

break Execution;
}

		
/* afterHandlerStep(index: 2) */
/* end_block */

		

				
/* afterSteps */
/* end_block */


				
/* beforeDefaultResponse */
/* end_block */


				result = new this.Response(503, "NO_RESPONSE_SENT", undefined);
			}
		} catch (error) {
			
/* beforeHookOnError */
/* end_block */


			result = await this.hooks.onError(request, error) 

			
/* afterHookOnError */
/* end_block */

		}

		
/* beforeTreatResult */
/* end_block */


		if(!(result instanceof this.Response)){
			throw new this.ResultIsNotAResponseError(result)
		}

		
/* afterTreatResult */
/* end_block */


		return result
		"
`;
